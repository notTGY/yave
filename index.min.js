M=[]
H=e=>20*++e|0
X=Y=Z=A=B=0,x=c.getContext`2d`
S=Math.sin
C=Math.cos
P=x.createImageData(c.width=c.height=RES=80,RES)
Q=P.data
for(N=RES**2;N--;)Q[N*4+3]=255
R=(I,J,e)=>{if(I<.5&&J<.5&&e<.5&&I>-.5&&J>-.5&&e>-.5)K=H(D),D=9}
PUTPIXEL=e=>Q[N*4]=Q[N*4+1]=Q[N*4+2]=K
O1=O=>{
  rx = O[0]-X
  ry = O[1]-Y
  rz = O[2]-Z
  if(rx**2+ry**2+rz**2>60) return 0
  cx = SA*CB
  cy = SB
  cz = CA*CB
  t = (rx*cx + ry*cy + rz*cz)
  if (t<1) return 0
  px = rx - t*cx
  py = ry - t*cy
  pz = rz - t*cz
  return (px**2 + py**2 + pz**2)<4*t*t
}


O2=O=>{
  rx = O[0]-X
  ry = O[1]-Y
  rz = O[2]-Z
  a = rx*dx + ry*dy + rz*dz
  bx = rx - a*dx
  by = ry - a*dy
  bz = rz - a*dz
  return bx**2 + by**2 + bz**2 < 2*a*a
}


U=e=>{
  BEFORE()
  CA=C(A)
  SA=S(A)
  CB=C(B)
  SB=S(B)
  V=M.filter(O1)
  for(N=RES**2;N--;){
    px = 2*(N%RES)/RES-1
    py = 2*(N/RES|0)/RES-1
    pp = CB + py*SB
    dx = px*CA + SA*pp 
    dz = CA*pp - px*SA 
    dy = SB - py*CB
    W = V.filter(O2)
    K=255
    for(D=1;D<9;D+=.2)
      W.map(O => R(
          O[0]-X - dx*D,
          O[1]-Y - dy*D,
          O[2]-Z - dz*D
        )
      )
    PUTPIXEL(K)
  }
  x.putImageData(P,0,0)
  AFTER()
  setTimeout(U,0)
}
